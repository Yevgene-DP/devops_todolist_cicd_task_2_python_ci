name: Python CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.9'

jobs:
  python-ci:
    name: Python CI
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout code
    - name: Checkout repository
      uses: actions/checkout@v4

    # Step 2: Display user and commit info
    - name: Display run information
      run: |
        echo "ðŸš€ Workflow triggered by: $GITHUB_ACTOR"
        echo "ðŸ”— Commit SHA: $GITHUB_SHA"
        echo "ðŸŒ¿ Branch: $GITHUB_REF_NAME"
        echo "ðŸŽ¯ Event: $GITHUB_EVENT_NAME"

    # Step 3: Set up Python
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    # Step 4: Install dependencies
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install coverage flake8 pytest

    # Step 5: Run tests with coverage
    - name: Run tests with coverage
      run: |
        echo "=== RUNNING TESTS ==="
        if [ -d "tests" ]; then
          coverage run -m pytest tests/ -v
        else
          echo "No tests directory found. Creating sample test..."
          mkdir -p tests
          echo "import pytest" > tests/test_sample.py
          echo "def test_example():" >> tests/test_sample.py
          echo "    assert 1 + 1 == 2" >> tests/test_sample.py
          coverage run -m pytest tests/ -v
        fi

    # Step 6: Generate coverage report
    - name: Generate coverage report
      run: |
        echo "=== GENERATING COVERAGE REPORT ==="
        coverage html
        coverage xml
        coverage report -m

    # Step 7: Display coverage report in console
    - name: Display coverage report
      run: |
        echo "=== CODE COVERAGE REPORT ==="
        coverage report
        echo "============================"

    # Step 8: Check code style with flake8 (continue on error)
    - name: Check code style
      run: |
        echo "=== FLAKE8 CODE STYLE CHECK ==="
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || true
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        echo "==============================="
      continue-on-error: true

    # Step 9: Check code complexity (continue on error)
    - name: Check code complexity
      run: |
        echo "=== CODE COMPLEXITY CHECK ==="
        flake8 . --count --max-complexity=10 --exit-zero --statistics
        echo "============================="
      continue-on-error: true

    # Step 10: Upload Python code as artifact
    - name: Upload Python code as artifact
      uses: actions/upload-artifact@v4
      with:
        name: python-code-${{ github.sha }}
        path: |
          *.py
          requirements.txt
          tests/
        retention-days: 5

    # Step 11: Upload coverage reports as artifact
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports-${{ github.sha }}
        path: |
          htmlcov/
          coverage.xml
        retention-days: 5